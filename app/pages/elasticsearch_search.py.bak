"""
Okloa - ElasticSearch Search Page

This page provides an enhanced ElasticSearch-based search interface for the Okloa application.
"""

import streamlit as st
import pandas as pd
import sys
import os
from typing import Dict, Any, List, Union
from datetime import datetime

# Add the necessary paths
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

# Import project constants
from constants import EMAIL_DISPLAY_TYPE, SIDEBAR_STATE

# Import components
from app.components.email_viewer import create_email_table_with_viewer

# Import the enhanced search functionality
from src.features.elasticsearch_enhanced import enhanced_search_emails

def render_search_page():
    """Render the enhanced ElasticSearch search page"""
    
    st.subheader("Recherche ElasticSearch")

    # Load emails data from session state or using load_data if available
    if "emails_df" in st.session_state and not st.session_state.emails_df.empty:
        emails_df = st.session_state.emails_df
    else:
        # Try to import load_data from main app
        try:
            from app.app import load_data
            # Use the selected mailbox from session state or default to "All Mailboxes"
            selected_mailbox = st.session_state.get("selected_mailbox", "All Mailboxes")
            emails_df = load_data(selected_mailbox)
            # Store in session state for future use
            st.session_state.emails_df = emails_df
        except ImportError:
            st.error("Impossible de charger les données. Veuillez revenir à la page principale.")
            emails_df = pd.DataFrame()  # Empty DataFrame

    if emails_df.empty:
        st.warning("Aucune donnée d'email n'a été chargée. Veuillez sélectionner une boîte mail dans le panneau latéral.")
        return

    st.write("Cette interface vous permet de rechercher dans vos archives d'emails en utilisant ElasticSearch.")
    
    # Create tabs for different search modes
    search_tabs = st.tabs([
        "Recherche Simple", 
        "Recherche Avancée",
        "Options"
    ])
    
    with search_tabs[0]:  # Simple Search
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # Search query input
            search_query = st.text_input(
                "Rechercher dans les emails:", 
                key="simple_search_query",
                placeholder="Entrez des mots-clés..."
            )
        
        with col2:
            # Search mode selection
            search_mode = st.selectbox(
                "Mode de recherche:",
                options=[
                    "all", 
                    "content_and_title", 
                    "title_only", 
                    "content_only"
                ],
                format_func=lambda x: {
                    "all": "Tous les champs",
                    "content_and_title": "Contenu et Titre",
                    "title_only": "Titre uniquement",
                    "content_only": "Contenu uniquement"
                }.get(x, x),
                key="simple_search_mode"
            )
        
        # Direction filter
        direction_options = ["Tous", "Envoyés", "Reçus"]
        selected_direction = st.selectbox("Direction:", direction_options, key="simple_direction")
        
        # Convert selection to filter format
        direction_filter = None
        if selected_direction == "Envoyés":
            direction_filter = "sent"
        elif selected_direction == "Reçus":
            direction_filter = "received"
        
        # Prepare filters
        filters = {}
        if direction_filter:
            filters["direction"] = direction_filter
        
        # Simple search button
        simple_search_button = st.button("Rechercher", key="simple_search_button")
        
        if simple_search_button:
            if not search_query and not filters:
                st.warning("Veuillez saisir au moins un terme de recherche ou sélectionner un filtre.")
            else:
                # Show a spinner during search
                with st.spinner("Recherche en cours..."):
                    # Get fuzziness from session state or default to AUTO
                    fuzziness = st.session_state.get("fuzziness", "AUTO")
                    
                    # Use enhanced search functionality
                    results_df = enhanced_search_emails(
                        emails_df,
                        query=search_query,
                        search_mode=search_mode,
                        filters=filters,
                        fuzziness=fuzziness,
                        size=100  # Limit to 100 results
                    )
                    
                    # Store results in session state
                    st.session_state["search_results"] = results_df
                    
                    # Display results count
                    st.subheader(f"Résultats: {len(results_df)} emails trouvés")
                    
                    # Display results using the interactive viewer
                    if not results_df.empty:
                        create_email_table_with_viewer(results_df, key_prefix="es_search_simple")
                    else:
                        st.info("Aucun résultat trouvé. Essayez d'élargir vos critères de recherche ou de modifier le niveau de fuzziness.")
    
    with search_tabs[1]:  # Advanced Search
        st.write("Recherche avancée avec plus d'options de filtrage")
        
        # Search query input
        search_query = st.text_input(
            "Rechercher dans les emails:", 
            key="advanced_search_query",
            placeholder="Entrez des mots-clés..."
        )
        
        # Select which fields to search in
        st.write("Champs à inclure dans la recherche:")
        col1, col2 = st.columns(2)
        
        with col1:
            include_subject = st.checkbox("Sujet", value=True, key="include_subject")
            include_body = st.checkbox("Contenu", value=True, key="include_body")
        
        with col2:
            include_from = st.checkbox("Expéditeur", value=False, key="include_from")
            include_to = st.checkbox("Destinataire", value=False, key="include_to")
        
        # Build search fields list
        search_fields = []
        if include_subject:
            search_fields.append("subject")
        if include_body:
            search_fields.append("body")
        if include_from:
            search_fields.extend(["from", "from_name"])
        if include_to:
            search_fields.extend(["to", "to_name"])
        
        # At least one field must be selected
        if not search_fields:
            st.warning("Veuillez sélectionner au moins un champ de recherche.")
            search_fields = ["subject", "body"]
        
        # Additional filters in an expander
        with st.expander("Filtres avancés", expanded=True):
            # Date range filter
            col_date1, col_date2 = st.columns(2)
            with col_date1:
                start_date = st.date_input("Date de début:", value=None, key="advanced_start_date")
            with col_date2:
                end_date = st.date_input("Date de fin:", value=None, key="advanced_end_date")
            
            # Sender/recipient filters
            col_from, col_to = st.columns(2)
            
            # Get unique senders and recipients
            unique_senders = emails_df['from'].dropna().unique().tolist()
            unique_recipients = []
            for recipients in emails_df['to'].dropna():
                for recipient in recipients.split(';'):
                    recipient = recipient.strip()
                    if recipient and recipient not in unique_recipients:
                        unique_recipients.append(recipient)
            
            with col_from:
                selected_sender = st.selectbox(
                    "Expéditeur:",
                    ["Tous"] + sorted(unique_senders),
                    key="advanced_sender"
                )
            with col_to:
                selected_recipient = st.selectbox(
                    "Destinataire:",
                    ["Tous"] + sorted(unique_recipients),
                    key="advanced_recipient"
                )
            
            # Attachment filter
            has_attachments = st.checkbox("Avec pièces jointes", key="advanced_has_attachments")
            
            # Direction filter
            direction_options = ["Tous", "Envoyés", "Reçus"]
            selected_direction = st.selectbox("Direction:", direction_options, key="advanced_direction")
            
            # Convert selection to filter format
            direction_filter = None
            if selected_direction == "Envoyés":
                direction_filter = "sent"
            elif selected_direction == "Reçus":
                direction_filter = "received"
        
        # Prepare search filters
        filters = {}
        if direction_filter:
            filters['direction'] = direction_filter
        if selected_sender != "Tous":
            filters['from'] = selected_sender
        if selected_recipient != "Tous":
            filters['to'] = selected_recipient
        if has_attachments:
            filters['has_attachments'] = True
        
        # Prepare date range
        date_range = {}
        if start_date:
            date_range['start'] = pd.Timestamp(start_date)
        if end_date:
            # Set to end of day
            end_datetime = pd.Timestamp(end_date) + pd.Timedelta(days=1) - pd.Timedelta(seconds=1)
            date_range['end'] = end_datetime
        
        # Advanced search button
        advanced_search_button = st.button("Rechercher", key="advanced_search_button")
        
        if advanced_search_button:
            if not search_query and not filters and not date_range:
                st.warning("Veuillez saisir au moins un terme de recherche ou sélectionner un filtre.")
            else:
                # Show a spinner during search
                with st.spinner("Recherche en cours..."):
                    # Get fuzziness from session state or default to AUTO
                    fuzziness = st.session_state.get("fuzziness", "AUTO")
                    
                    # Use enhanced search functionality
                    results_df = enhanced_search_emails(
                        emails_df,
                        query=search_query,
                        search_mode="advanced",
                        fields=search_fields,
                        filters=filters,
                        date_range=date_range,
                        fuzziness=fuzziness,
                        size=100  # Limit to 100 results
                    )
                    
                    # Store results in session state
                    st.session_state["search_results"] = results_df
                    
                    # Display results count
                    st.subheader(f"Résultats: {len(results_df)} emails trouvés")
                    
                    # Display results using the interactive viewer
                    if not results_df.empty:
                        create_email_table_with_viewer(results_df, key_prefix="es_search_advanced")
                    else:
                        st.info("Aucun résultat trouvé. Essayez d'élargir vos critères de recherche ou de modifier le niveau de fuzziness.")
    
    with search_tabs[2]:  # Options
        st.write("Options de recherche ElasticSearch")
        
        # Fuzziness setting
        st.write("### Niveau de Fuzziness")
        fuzziness_options = [
            {"label": "AUTO (Recommandé)", "value": "AUTO"},
            {"label": "0 (Correspondance exacte)", "value": "0"},
            {"label": "1 (Permet 1 caractère de différence)", "value": "1"},
            {"label": "2 (Permet 2 caractères de différence)", "value": "2"}
        ]
        
        selected_fuzziness = st.selectbox(
            "Niveau de fuzziness:",
            options=fuzziness_options,
            format_func=lambda x: x["label"],
            index=0  # Default to AUTO
        )
        
        # Save fuzziness setting to session state
        st.session_state["fuzziness"] = selected_fuzziness["value"]
        
        # Explanation of search modes
        st.write("### Explication des modes de recherche:")
        st.markdown("""
        - **Tous les champs**: Recherche dans tous les champs (sujet, contenu, expéditeur, destinataire)
        - **Contenu et Titre**: Recherche uniquement dans le sujet et le contenu de l'email
        - **Titre uniquement**: Recherche uniquement dans le sujet de l'email
        - **Contenu uniquement**: Recherche uniquement dans le contenu de l'email
        - **Recherche avancée**: Permet de sélectionner les champs spécifiques à inclure dans la recherche
        """)
        
        # Explanation of fuzziness
        st.write("### Qu'est-ce que la fuzziness?")
        st.markdown("""
        La fuzziness permet de trouver des résultats même lorsque les termes recherchés 
        contiennent des fautes d'orthographe ou des variations.
        
        - **AUTO**: Détermine automatiquement le niveau de fuzziness en fonction de la longueur du terme
        - **0**: Correspondance exacte, sans tolérance pour les fautes
        - **1**: Permet une différence d'un caractère (insertion, suppression, substitution)
        - **2**: Permet deux différences de caractères
        """)
        
        # Reset search parameters
        if st.button("Réinitialiser les paramètres de recherche"):
            # Clear session state for search parameters
            keys_to_clear = [
                "simple_search_query", "simple_search_mode", "simple_direction",
                "advanced_search_query", "include_subject", "include_body",
                "include_from", "include_to", "advanced_start_date", "advanced_end_date",
                "advanced_sender", "advanced_recipient", "advanced_has_attachments", 
                "advanced_direction", "search_results"
            ]
            for key in keys_to_clear:
                if key in st.session_state:
                    del st.session_state[key]
            
            # Set default fuzziness
            st.session_state["fuzziness"] = "AUTO"
            
            st.success("Paramètres réinitialisés.")
            st.rerun()
    
    # Display previous search results if available
    if "search_results" in st.session_state and not st.session_state["search_results"].empty:
        # Only show if not already displayed by a search button click
        if not (("simple_search_button" in st.session_state and st.session_state["simple_search_button"]) or 
                ("advanced_search_button" in st.session_state and st.session_state["advanced_search_button"])):
            results_df = st.session_state["search_results"]
            st.subheader(f"Résultats précédents: {len(results_df)} emails trouvés")
            create_email_table_with_viewer(results_df, key_prefix="es_search_previous")


# This allows the page to be run directly for testing
if __name__ == "__main__":
    # Set up Streamlit configuration for testing
    st.set_page_config(
        page_title="Okloa - ElasticSearch Search",
        page_icon="📧",
        layout="wide",
    )
    
    # Create test data for testing
    if "emails_df" not in st.session_state:
        # Create a simple DataFrame with test emails
        test_data = {
            "message_id": [f"msg_{i}" for i in range(1, 11)],
            "date": pd.date_range(start="2023-01-01", periods=10),
            "from": ["test@example.com"] * 10,
            "to": ["recipient@example.com"] * 10,
            "cc": [""] * 10,
            "subject": [f"Test Subject {i}" for i in range(1, 11)],
            "body": [f"This is test email body {i}" for i in range(1, 11)],
            "attachments": [""] * 10,
            "has_attachments": [False] * 10,
            "direction": ["sent", "received"] * 5,
            "mailbox": ["Test Mailbox"] * 10
        }
        st.session_state.emails_df = pd.DataFrame(test_data)
    
    # Render the search page
    render_search_page()
